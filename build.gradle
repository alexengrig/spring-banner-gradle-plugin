plugins {
    id 'com.gradle.plugin-publish'
    id 'org.unbroken-dome.test-sets'
}

group = 'io.github.alexengrig.gradle'
version = "${springBannerPluginVersion}"
description = 'Spring Banner Gradle Plugin for generating banners.'

gradlePlugin {
    plugins {
        springBannerPlugin {
            id = 'io.github.alexengrig.spring-banner'
            displayName = 'Spring Banner Gradle Plugin'
            description = "Generating Spring Boot 'banner.txt'."
            implementationClass = 'io.github.alexengrig.gradle.spring.banner.SpringBannerPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/alexengrig/spring-banner-gradle-plugin'
    vcsUrl = 'https://github.com/alexengrig/spring-banner-gradle-plugin'
    tags = ['spring', 'spring-framework', 'spring-boot', 'banner']
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Alexengrig Dev.'
        )
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.github.dtmo.jfiglet:jfiglet:${jfigletVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"

    testImplementation "org.assertj:assertj-core:${assertJVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

testSets {
    functionalTest
    integrationTest
}

tasks.withType(Test) { testTask ->
    testTask.useJUnitPlatform()
    check.dependsOn testTask
}
